// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sunny.Repository;

namespace Sunny.Repository.Migrations
{
    [DbContext(typeof(EfDbContext))]
    partial class EfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sunny.Repository.DbModel.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .HasColumnName("category_name")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time");

                    b.Property<long>("CreaterId")
                        .HasColumnName("creater_id");

                    b.Property<DateTime>("UpdateTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time");

                    b.Property<long>("UpdaterId")
                        .HasColumnName("updater_id");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.Model.IdTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("IdTest");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.Passage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time");

                    b.Property<long>("CreaterId")
                        .HasColumnName("creater_id");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnName("last_edit_time");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdateTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time");

                    b.Property<long>("UpdaterId")
                        .HasColumnName("updater_id");

                    b.HasKey("Id");

                    b.ToTable("Passage");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.PassageCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time");

                    b.Property<long>("CreaterId")
                        .HasColumnName("creater_id");

                    b.Property<long>("PassageId")
                        .HasColumnName("passage_id");

                    b.Property<DateTime>("UpdateTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time");

                    b.Property<long>("UpdaterId")
                        .HasColumnName("updater_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PassageId");

                    b.ToTable("PassageCategory");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AAA")
                        .HasColumnName("a_a_a")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time");

                    b.Property<long>("CreaterId")
                        .HasColumnName("creater_id");

                    b.Property<decimal>("Score")
                        .HasColumnName("score")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StudentName")
                        .HasColumnName("student_name")
                        .HasMaxLength(30);

                    b.Property<string>("Test")
                        .HasColumnName("test")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdateTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time");

                    b.Property<long>("UpdaterId")
                        .HasColumnName("updater_id");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.StudentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .HasColumnName("address1")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time");

                    b.Property<long>("CreaterId")
                        .HasColumnName("creater_id");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(30);

                    b.Property<long>("StudentId")
                        .HasColumnName("student_id");

                    b.Property<DateTime>("UpdateTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time");

                    b.Property<long>("UpdaterId")
                        .HasColumnName("updater_id");

                    b.Property<int>("Zipcode")
                        .HasColumnName("zipcode");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddress");
                });

            modelBuilder.Entity("Sunny.Repository.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<decimal?>("PuaId");

                    b.Property<string>("UserName");

                    b.Property<string>("test");

                    b.HasKey("Id");

                    b.ToTable("Uesrs");
                });

            modelBuilder.Entity("Sunny.Repository.UserB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<decimal>("PuaId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Uesr2s");
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.PassageCategory", b =>
                {
                    b.HasOne("Sunny.Repository.DbModel.Category", "Category")
                        .WithMany("PassageCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sunny.Repository.DbModel.Passage", "Passage")
                        .WithMany("PassageCategories")
                        .HasForeignKey("PassageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sunny.Repository.DbModel.StudentAddress", b =>
                {
                    b.HasOne("Sunny.Repository.DbModel.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
